    5.01
HTML creates Documnet Object Model(DOM) which creates a tree structure for different nested items in document 


    5.02- How to accses items in DOM
to do something with DOM first find elements by using querySelector or querySelectorAll
    they take CSS queries as parameters 

    e.g. document.querySelector("main") or document.querySelector(".maincontent") // 2nd method uses the class name rather than object name
         document.querySelector("header")

         document.querySelectorAll("main li") returns a node list 

    5.03 (old) other ways of accsessing elements
.getElementById() -
.getElementsByClassName() -  returns an HTML collection of space seperated items

    5.04 - Practice


    5.05
.className returns the name of the key which references a specific value
    e.g. document.querySelector("h1").className returns "backPack_name" the name of the class which is being displayed in the heading 

in JS frameworks like react, className is a specific property as such it can't be used in the way above  

what you should uses is .classList 
    This returns a DOM Token List of all the classes assigned to a specific property, it also comes with add, remove, toggle methods which you can use to add, remove or toggle classes


    5.06 
.attributes returns a named node map, attributes are stuf like src, alt in the img tag, everything in a tag is an attribute, so tecnically can use this to manipuate classes

    .attributes come with thier own methods, e.g 
                                                    document.querySelector("img").hasAtrtribute("src")
    
    5.07
.style returns the inline css parameter declerations, can set them here in Js, e.g. document.querySelector(".site_title").style.color = "pink"


    5.08 - Practice

to do- find elements and add 2 different classes 
        remove one of the classes 
        add new attribute to element
            request value 
            change value 
        add inlines CSS
        Query style attribute to get full list of style attributes  

        - history of attempts in /practice/05_08

        
    5.09 - better way of injecting HTML, last way of using innerHTML to re-set everything in an element removes anything that was there before

what you should do is first add a new DOM element (empty box) after the already existing elements and then populate the new DOM Element 

    content = //template literal here
    const newArticle = document.createElement("article" ) //creates article element
    newArticle.innerHTML(content) //populate
    
    const main = document.querySelector(".maincontent")
    main.append(newArticle) // append new article element to end of parent node  i.e. main, to add at start use .prepend

//bunch of other useful methods to specify where to add to HTML, most useful: Targetelement.insertAdjacentElement(position, element), 
// insert elemnt beforebegin or afterbegin or beforened or afterend of target element


// JavaScript code​​​​​​‌​‌‌‌​​​‌​​‌​​‌​‌​‌​‌​‌‌​ below
// Change these values to control whether you see 
// the expected answer and/or hints.
const showExpectedResult = false
const showHints = false

// Setup data
const navContent = `
      <li><a href="#">Home</a></li>
      <li><a href="#">About</a></li>
      <li><a href="#">Backpacks</a></li>
      <li><a href="#">Other things</a></li>
      <li><a href="#">Contact</a></li>
`;


function createNavMenu(document) {
      // Your code goes here
      const newNav= document.createElement("nav")
      const newUL= document.createElement("ul")
      newUL.innerHTML= navContent
      newNav.append(newUL)
      newNav.classList.add("main-naviagtion")
      
      const header= document.querySelector(".siteheader") 
      header.append(newNav)
}


